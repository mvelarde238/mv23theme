<?php
namespace Ultimate_Fields;

use Ultimate_Fields\Template;

/**
 * Handles options pages.
 *
 * @since 3.0
 */
class Options_Page {

	/**
	 * Holds the ID of the page.
	 *
	 * @since 3.0
	 * @var string
	 */
	protected $id;

	/**
	 * Holds the title of the page.
	 *
	 * @since 3.0
	 * @var string
	 */
	protected $title;

	/**
	 * Holds the capability needed for the options page.
	 *
	 * The page will only be accessible to users who have that capability.
	 *
	 * @since 3.0
	 * @var string
	 */
	protected $capability = 'manage_options';

	/**
	 * The CSS class of the icon of the page in the admin menu.
	 *
	 * You can either use a DashIcons icon, or a custom one. Either way, the class of the icon is a string.
	 *
	 * @url https://github.com/melchoyce/dashicons
	 * @since 3.0
	 * @var string
	 */
	protected $icon = '';

	/**
	 * The position in the main menu.
	 *
	 * The menu position only matters when the page is a top-level menu page.
	 * Otherwise, the page is added to the appropriate menu section and the priority is based
	 * on the moment when the page is created.
	 *
	 * @since 2.0
	 * @var int
	 */
	protected $position = null;

	/**
	 * Holds the ID of the page, as generated by WordPress.
	 *
	 * Will be used when adding and arranging metaboxes.
	 *
	 * @since 3.0
	 * @var string
	 */
	protected $generated_id;

	/**
	 * The slug of the parent page.
	 *
	 * If the page should be a child-page to another page in the admin, this will hold the slug of the parent page.
	 * Please note that this is only required when the page should only be visible in a special page. Pages like
	 * settings, tools, appearance and etc. are already defined.
	 *
	 * If this variable is set, the $type one will be ignored.
	 *
	 * @since 3.0
	 * @var string
	 */
	protected $parent_slug = '';

	/**
	 * Indicates where should the page be located - menu/appearance/subpage, etc..
	 *
	 * Based on the content of this variable, a specific function for the appropriate menu will be called.
	 * Available options are:
	 * - settings,    # In the settings tab
	 * - appearance,  # In the Appearance tab
	 * - menu,        # Directly in the menu
	 * - tools        # In the tools tab
	 *
	 * @since 3.0
	 * @var string
	 */
	protected $type = 'menu';

	/**
	 * Contains all created pages, based on ID.
	 *
	 * @since 3.0
	 * @var Options_Page[]
	 */
	public static $created = array();

	/**
	 * Creates a new page.
	 *
	 * @since 3.0
	 *
	 * @param string $id    The ID of the page.
	 * @param string $title The title for the page (optional).
	 * @return Ultimate_Fields\Options_Page;
	 */
	public static function create( $id, $title = null ) {
		if( is_array( $id ) ) {
			if( empty( $id ) ) {
				return false;
			}

			extract( $args = wp_parse_args( $id, array(
				'title'       => null,
				'capability'  => null,
				'icon'        => null,
				'position'    => null,
				'parent_slug' => null,
				'type'        => null
			)));

			$page = new self( $id, $title );

			if( $capability )  $page->set_capability( $capability );
			if( $icon )        $page->set_icon( $icon );
			if( $type )        $page->set_type( $type );
			if( $position )    $page->set_position( $position );
			if( $parent_slug ) $page->set_parent( $parent_slug );

			return $page;
		} else {
			return new self( $id, $title );
		}
	}

	/**
	 * Creates a new page.
	 *
	 * @since 3.0
	 *
	 * @param string $id    The ID of the page, optional.
	 * @param string $title The title of the page.
	 */
	protected function __construct( $id, $title = null ) {
		$this->id    = $id;
		$this->title = ultimate_fields()->generate_title( $id, $title );

		add_action( 'admin_menu', array( $this, 'add_to_main_menu' ), 10 );
		add_action( 'admin_menu', array( $this, 'add_to_sub_menu' ), 11 );
		add_action( 'network_admin_menu', array( $this, 'add_to_network_menu' ) );
		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_scripts' ) );

		# Save the page to the list of created ones
		self::$created[ $this->id ] = $this;
	}

	/**
	 * Checks if the page should be added to the main menu.
	 *
	 * @since 3.0
	 */
	public function add_to_main_menu() {
		if( $this->parent_slug ) {
			return;
		} else {
			$this->add_to_menu();
		}
	}

	/**
	 * Checks if the page should be added to the sub-menu.
	 *
	 * @since 3.0
	 */
	public function add_to_sub_menu() {
		if( $this->parent_slug ) {
			$this->add_to_menu();
		}
	}

	/**
	 * Attaches the page to the admin menu.
	 *
	 * @since 3.0
	 */
	public function add_to_menu() {
		# If it's a network page and we're not in the network, don't add the page
		if( 'network' == $this->type && ! is_network_admin() ) {
			return;
		}

		# Create some shorter vars, so they can be filtered and are the same for most cases.
		$page_title = $this->title;
		$menu_title = $this->title;
		$capability = $this->capability;
		$menu_slug  = $this->id;
		$function   = array( $this, 'display' );

		# Icon and menu position are only available for top-level items
		$icon_url   = $this->icon;
		$position   = $this->position;

		# Collect those variables to allow them to be filtered later.
		$vars = compact( 'page_title', 'menu_title', 'capability', 'menu_slug', 'function', 'icon_url', 'position' );
		$keys = array_keys( $vars );

		/**
		 * Change the arguments for an options page before it's attached to the admin menu.
		 *
		 * @since 3.0
		 *
		 * @param mixed[] $vars The variables that will be used in this context
		 * @param Ultimate_Fields\Options_Page $page The page whose variables are those.
		 */
		$vars = apply_filters( 'uf.options_page.menu_args', $vars, $this );

		# Extract the variables
		extract( array_intersect_key( $vars, array_flip( $keys ) ) );

		# Do one thing for a regular page
		if( ! $this->parent_slug ) {
			# Call the needed function depending on the type
			switch( $this->type ) {
				case 'tools':
					$this->generated_id = add_management_page( $page_title, $menu_title, $capability, $menu_slug, $function );
					break;
				case 'settings':
					$this->generated_id = add_options_page( $page_title, $menu_title, $capability, $menu_slug, $function );
					break;
				case 'appearance':
					$this->generated_id = add_theme_page( $page_title, $menu_title, $capability, $menu_slug, $function );
					break;
				default:
				case 'menu':
					$this->generated_id = add_menu_page( $page_title, $menu_title, $capability, $menu_slug, $function, $icon_url, $position );
					break;
			}
		} else {
			# And something else for a sub-page
			$this->generated_id = add_submenu_page( $this->parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function );
		}

		# Add the approprtiate loaders
		add_action( 'load-' . $this->generated_id, array( $this, 'load' ) );
	}

	/**
	 * Adds the page to the admin menu.
	 *
	 * @since 3.0
	 */
	public function add_to_network_menu() {
		if( 'network' != $this->type ) {
			return;
		}

		$this->add_to_menu();
	}

	/**
	 * Returns the generated ID of the page.
	 *
	 * @since 3.0
	 *
	 * @return mixed Either a string ID when the page has been generated or null if too early.
	 */
	public function get_screen_id() {
		return $this->generated_id;
	}

	/**
	 * Forces a specific screen ID to be used within the page.
	 * Use this only if embedding the options page somewhere.
	 *
	 * @since 3.0
	 *
	 * @param string $id THe ID to force.
	 */
	public function set_screen_id( $id ) {
		$this->generated_id = $id;
	}

	/**
	 * Loads settings for the page.
	 *
	 * @since 3.0
	 */
	public function load() {
		# Try saving
		if( $this->save() ) {
			return;
		}

		# Add a saving metabox to the right column
		add_meta_box(
			$this->id . '-save',
			__( 'Actions', 'ultimate-fields' ),
			array( $this, 'actions_box' ),
			$this->generated_id,
			'side',
			'high'
		);

		/**
		 * Allows meta boxes to be added to options pages and specifically this page.
		 *
		 * @since 3.0
		 *
		 * @param string $id The ID of the page.
		 */
		do_action( 'add_meta_boxes_' . $this->id, $this );
		do_action( 'add_meta_boxes', $this->id );

		add_screen_option( 'layout_columns', array( 'max' => 2, 'default' => 2 ) );

		# Allow AJAX calls
		ultimate_fields()->ajax( $this );
	}

	/**
	 * Displays the page.
	 *
	 * @since 3.0
	 */
	public function display() {
		Template::instance()->include_template( 'options-page/layout', array(
			'url'     => $this->get_url(),
			'page'    => $this,
			'id'      => $this->generated_id,
			'title'   => $this->title,
			'icon'    => $this->icon,
			'columns' => 1 == get_current_screen()->get_columns() ? 1 : 2,
			'nonce'   => wp_nonce_field( 'ULTIMATE_FIELDS_save_options_' . $this->id, 'uf_options_page_nonce', false, false )
		));
	}

	/**
	 * Attempts saving the page.
	 *
	 * @since 3.0
	 *
	 * @return bool Indicates whether the page has been saved or not.
	 */
	protected function save() {
		if( 'POST' != $_SERVER[ 'REQUEST_METHOD' ] ) {
			return;
		}

		if( ! isset( $_POST[ 'uf_options_page_nonce' ] ) ) {
			return;
		}

		$nonce = $_POST[ 'uf_options_page_nonce' ];

		if( ! wp_verify_nonce( $nonce, 'ULTIMATE_FIELDS_save_options_' . $this->id ) ) {
			return;
		}

		/**
		 * Allows options to be saved on the options page.
		 *
		 * @since 3.0
		 *
		 * @param Options_Page $page The page that is being saved.
		 */
		do_action( 'uf.options_page.save', $this );

		$url  = htmlspecialchars_decode( $this->get_url() );
		$url  = add_query_arg( 'uf-message', 1, $url );
		wp_redirect( $url );
		exit;
	}

	/**
	 * Enqueues scripts for the page.
	 *
	 * @since 3.0
	 */
	public function enqueue_scripts() {
		wp_enqueue_script( 'postbox' );
		wp_enqueue_style( 'ultimate-fields' );
	}

	/**
	 * Displays the saving box of the page.
	 *
	 * @since 3.0
	 */
	public function actions_box() {
		Template::instance()->include_template( 'options-page/actions-box' );
	}
	/**
	 * Controls the capability that's required in order for the page to be visible.
	 *
	 * @since 3.0
	 * @see http://codex.wordpress.org/Roles_and_Capabilities#Capabilities
	 *
	 * @param string $capability
	 * @return Ultimate_Fields\Options_Page The inance of the class, useful for chaining.
	 */
	public function set_capability( $capability ) {
		$this->capability = $capability;

		return $this;
	}

	/**
	 * Returns the capability that is required for that options page.
	 *
	 * @since 3.0
	 *
	 * @return string
	 */
	public function get_capability() {
		return $this->required_capability;
	}

	/**
	 * Sets an icon that will appear in the menu.
	 *
	 * @since 3.0
	 * @see $icon above :)
	 *
	 * @param string $icon A CSS class for the icon.
	 * @return Ultimate_Fields\Options_Page The instance of the container, useful for chaining.
	 */
	public function set_icon( $icon ) {
		$this->icon = $icon;

		return $this;
	}

	/**
	 * Returns the icon that will appear in the menu for that options page.
	 *
	 * @since 3.0
	 *
	 * @return string.
	 */
	public function get_icon() {
		return $this->icon;
	}

	/**
	 * Sets the type of the page, a.k.a. it's parent in the menu.
	 * The available types can be seen in the first array below.
	 *
	 * @since 3.0
	 *
	 * @param string $type One of the types below.
	 * @return Ultimate_Fields\Options_Page The instance of the page, useful for chaining.
	 */
	public function set_type( $type ) {
		$this->type = $type;

		$available = array(
			'settings',    # In the settings tab
			'appearance',  # In the Appearance tab
			'menu',        # Directly in the menu
			'tools',       # In the tools tab,
			'network'      # In the multisite menu
		);

		if( ! in_array( $type, $available ) ) {
			$message = __( '<strong>Ultimate_Fields\Options_Page</strong>: %s is not a valid options page type!', 'ultimate-fields' );
			$message = sprintf( $message, $type );
			wp_die( $message );
		}

		$this->type = $type;

		return $this;
	}

	/**
	 * Returns the type of the page.
	 *
	 * @since 3.0
	 *
	 * @return string The type
	 */
	public function get_type() {
		return $this->type;
	}

	/**
	 * Returns the ID of the page.
	 *
	 * @since 3.0
	 *
	 * @return string
	 */
	public function get_id() {
		return $this->id;
	}

	/**
	 * If the page is located in the main menu, set it's position.
	 *
	 * @since 3.0
	 *
	 * @param int $position The position according to the codex.
	 * @return Ultimate_Fields\Options_Page The instance of the page, useful for chaining.
	 * @see http://codex.wordpress.org/Function_Reference/add_menu_page
	 */
	public function set_position( $position ) {
		/**
		 * Changes the menu position options page.
		 *
		 * @since 3.0
		 *
		 * @param string $menu_position The requested position in the admin menu.
		 * @param Ultimate_Fields\Options_Page $container The options page whose position is being changed.
		 */
		$this->position = $position;

		return $this;
	}

	/**
	 * Retrieves the position of the page.
	 *
	 * @since 3.0
	 *
	 * @return string.
	 */
	public function get_position() {
		return $this->position;
	}

	/**
	 * Set a parent page by either it's slug or it's instance.
	 * Only applies to items that are located directly in the main menu.
	 *
	 * @since 3.0
	 *
	 * @param string|Ultimate_Fields\Options_Page $parent The parent page or it's slug.
	 * @return Ultimate_Fields\Options_Page The instance of the page, useful for chaining.
	 */
	public function set_parent( $parent ) {
		if( is_a( $parent, 'Ultimate_Fields\\Options_Page' ) ) {
			$this->parent_slug = $parent->get_id();
		} else {
			$this->parent_slug = $parent;
		}

		return $this;
	}

	/**
	 * Retrieves the ID of the page parent.
	 *
	 * @since 3.0
	 *
	 * @return string.
	 */
	public function get_parent() {
		return $this->parent_slug;
	}

	/**
	 * Sets the title that will be shown on the page itself.
	 *
	 * @since 3.0
	 *
	 * @param string $title The new title.
	 * @return Ultimate_Fields\Options_Page The instance of the page for chaining.
	 */
	public function set_page_title( $title ) {
		$this->page_title = $title;
		return $this;
	}

	/**
	 * Retrieves the displayed page title of the page.
	 *
	 * @since 3.0
	 *
	 * @return string.
	 */
	public function get_page_title() {
		return $this->page_title;
	}

	/**
	 * Sanitizes a title for external pages.
	 *
	 * @since 3.0
	 *
	 * @param string $title The title that is being used for a page.
	 * @return string
	 */
	public static function sanitize_title( $title ) {
		return sanitize_title( $title );
	}

	/**
	 * Returns a page based on it's slug.
	 *
	 * @since 3.0
	 *
	 * @param string $slug The slug/id of a page.
	 * @return mixed Either the page instance or false.
	 */
	public static function get( $slug ) {
		if( isset( self::$created[ $slug ] ) ) {
			return self::$created[$slug ];
		} else {
			return false;
		}
	}

	/**
	 * Returns the URL of the page.
	 *
	 * @since 3.0
	 *
	 * @return string
	 */
	public function get_url() {
		$url = is_network_admin()
			? network_admin_url( 'admin.php?page=' . $this->id )
			: menu_page_url( $this->id, false );

		$url = apply_filters( 'uf.options_page.redirect_url', $url, $this );

		return $url;
	}

	/**
	 * Exports the page.
	 *
	 * @since 3.0
	 *
	 * @return mixed[]
	 */
	public function export() {
		$data = array(
			'id'    => $this->id,
			'title' => $this->title
		);

		if( 'menu' != $this->type )                 $data[ 'type' ]       = $this->type;
		if( 'manage_options' != $this->capability ) $data[ 'capability' ] = $this->capability;
		if( $this->icon )                           $data[ 'icon' ]       = $this->icon;
		if( $this->position )                       $data[ 'position' ]   = $this->position;
		if( $this->parent_slug )                    $data[ 'parent_slug' ] = $this->parent_slug;

		return $data;
	}
}
